[{"content":"Understanding WordPress Custom Queries WordPress custom queries allow you to fetch specific data from your WordPress database, beyond the default behavior. This is particularly useful when you want to display posts or pages based on custom criteria, such as posts from a specific category, posts by a particular author, or even custom post types.\nWhat is a Query in WordPress? A query in WordPress is a request to the database for specific information. By default, WordPress runs a query to fetch posts and pages to display them according to your theme\u0026rsquo;s settings. However, you can customize these queries to suit your needs.\nWhy Use Custom Queries? Custom queries are useful when you need to:\nDisplay posts from a specific category. Show posts by a particular author. Fetch custom post types. Display posts based on custom fields. Using WP_Query The WP_Query class in WordPress allows you to create custom queries. Here’s a basic code example:\nExplanation Define the Query Parameters: The $args array specifies the criteria for the query. In this example, we are fetching the latest 5 posts from the ‘news’ category. Execute the Query: new WP_Query($args) creates a new query object based on the specified parameters. The Loop: This is where we display the fetched posts. have_posts() checks if there are posts matching the query, and the_post() sets up the post data. Reset Post Data: wp_reset_postdata() ensures that the global $post object is restored to the main query. Footnotes Wordpress Custom Queries are such a nifty feature that using these truly unlocks the power of custom wordpress development. Happy Querying until next time!\n","permalink":"http://localhost:1313/posts/wordpress_custom_queries/","summary":"Custom Queries in WordPress Unlock True Power of Custom WordPress Web Development","title":"What are WordPress Custom Queries?"},{"content":"What are pretty URLS? when we are running multiple docker containers or let\u0026rsquo;s just call them \u0026ldquo;services\u0026rdquo;, one problem becomes pretty obvious that accessing them all becomes really complicated and you need to remember different ports if you want to access them.\nthe trouble starts when you implement a rather large number of services, since our docker engine is running locally on a single host, we have to use the same IP to access all the active/running services. so for example, if you are running 3 different containers exposing 3 different PORTS such as 5050, 8080, `8070\u0026rsquo; etc then in order to access these, you will need to remember which port belongs to which container. This is stuff of the nightmares!\nEnter Pretty URLS pretty URLs is a concept where we can use random but easy-to-remember URLS and assign them to each container so next time we need to access this container, we can access it by going to the assigned pretty URL. .e.g. if you have an nginx container running, you can simply access it on the following url : mywebserver.localhost this will work as long as the container and the host machine is on the same network.\nYML code for getting pretty URLS! version: \u0026#39;2.4\u0026#39; services: nginx-proxy: image: nginxproxy/nginx-proxy:1.6-alpine ports: - \u0026#34;80:80\u0026#34; volumes: - /var/run/docker.sock:/tmp/docker.sock nginx: image: nginx:1.27.0-alpine environment: - VIRTUAL_HOST=dude.localhost nginx2: image: nginx:1.27.0-alpine environment: - VIRTUAL_HOST=ghost.localhost Explanation so this docker compose uses a 3rd party image that\u0026rsquo;s built on top of nginx to automtically configure pretty URLS. when this script runs, it starts 3 containers, where the 1st is the setup container and the rest of the 2 containers can be accessed using their respective Virtual Host adresses. this uses reverse proxy configruation built on top of nginx webserver.\nthat\u0026rsquo;s it for now! Happy Pretty URL-ing your containers!\n","permalink":"http://localhost:1313/posts/docker_magic_links/","summary":"when running multiple Docker containers, you can access them all using pretty URLS","title":"how to access docker containers with pretty urls locally?"},{"content":"what is up with dockerzing old node apps? Hello good ppl!\nso as you know, I have been dabling with docker a lot since lately so today I found a really (ancient) old node app, and thought it would be fun to dockerize it. a little fun and a little challenge should be enough to level up my bad docker skills?\nI won but it took a lot! when I started, I had an idea that it would not be easy task, but thanks to mother AI age, and MS copilot pro, I was able to go through a few iterations and finally got the entire app working.\nTruth be told, if it was not for CoPilot Pro, I might as well have wasted 10 more hours trying to get things rights. so here is the summary of most challenging things I encountered on this jounery:\nElephant in the Room Docker? This app takes a gif file and outputs a cartoonish version of the same gif using GraphicsMagick binary.\nso I had to figur out a way to install that binary manually into the app using apk file manager as i was using alpine linux as base image.\nthe 2nd challenge was the fact that app was using two folders i.e /in and /out for scanning and outputting gifs. thanks to docker mount-paths, I was able to get them working with no truble!\nthe 3rd and biggest problem of them all was that this app was clearly made way before docker-age, so it was using winston to log all logs into files on disk instead of stdout and stderr. we need the logs to go there if we want to use docker log or see any log on the screen. thanks to AI, i was able to actually create those files / folders into the container using mkdir and then hard link them directly to stdout and stderror. the command to achieve that can be seen down below in Dockerfile code.\nthat\u0026rsquo;s it folks! once i got the container compiled, i was able to run it just fine. you can check the dockerFile and run command down below\nFROM node:8-alpine # Install GraphicsMagick RUN apk update \u0026amp;\u0026amp; apk add --no-cache graphicsmagick ENV CHARCOL_FACTOR=0.8 WORKDIR /app COPY package*.json ./ RUN npm install COPY . . RUN mkdir -p /app/logs \\ \u0026amp;\u0026amp; touch /app/logs/combined.log /app/logs/error.log \\ \u0026amp;\u0026amp; ln -sf /dev/stdout /app/logs/combined.log \\ \u0026amp;\u0026amp; ln -sf /dev/stderr /app/logs/error.log RUN ln -sf /dev/stdout /app/logs/combined.log \\ \u0026amp;\u0026amp; ln -sf /dev/stderr /app/logs/error.log CMD [\u0026#34;node\u0026#34;, \u0026#34;index.js\u0026#34;] command to create the container docker build -t oldnodeapp .\ncommand to run the container docker run -it --rm -v \u0026quot;$(pwd)/in:/app/in\u0026quot; -v \u0026quot;$(pwd)/out:/app/out\u0026quot; oldnodeapp\n","permalink":"http://localhost:1313/posts/dockerize_old_app/","summary":"Dockerizing old node apps is quite fun when you know what you are doing!","title":"Dockerizing an old node app"},{"content":"node process is imortal inside docker containers today, when I was going through my docker adventures, I learned a rather curious things. it\u0026rsquo;s that when running node inside a docker container, you need special syntax or a binary if you want it to gracefully close and shutdown properly.\nNow, I know that it\u0026rsquo;s pretty typical for us to simply ctrl + c out of container, when we are done experimenting, and that usually shut downs the container, but this is different with node containers. Pressing ctrl + c on a node container only makes it look like you closed / killed the container, but in reality it\u0026rsquo;s actually still running in docker engine setup. you can confirm it by running docker ps inside your terminal or from docker GUI. so what\u0026rsquo;s going on with node containers?\n3 Methods to kill them all the simplest and easiest of them all is to attach a - - init flag into your docker run command. this shims a small binary called tini into container, so that when you press ctrl + c it makes sure that container is indeeded closed / shut down if you can control DockerFile or docker image generation setup for your node app, you can install tini image right into your apline or other underlying OS and use entrypoint instruction to scaffold entire app via this tini process. this will again make sure that closing container will in fact kill the app. (down below you can find actual instrutions in a sample DockerFile) Edit your node app so that it can detect closing signal from cotainer and handle graceful shutdown. This is by far the most approporite and practical method for any practical/ real-world node app.You can use this function to properly cleanup and or do other essential tasks before the app is killed forever. Sample DockerFile FROM node:10.15-alpine EXPOSE 3000 RUN apk add --no-cache tini WORKDIR /usr/src/app COPY package*.json ./ RUN npm install \u0026amp;\u0026amp; npm cache clean --force COPY . . ENTRYPOINT [\u0026#34;tini\u0026#34;, \u0026#34;--\u0026#34;] CMD [\u0026#34;node\u0026#34;, \u0026#34;app.js\u0026#34;] Closing Remarks That\u0026rsquo;s it for today. happy killing node apps! 🫡\n","permalink":"http://localhost:1313/posts/docker_node_killing/","summary":"Containers running node images need special syntax and / or commands to gracefully shutdown","title":"A Case of Immortal Node Container?"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested Unordered list Fruit Apple Orange Banana Dairy Milk Cheese Nested Ordered list Fruit Apple Orange Banana Dairy Milk Cheese Third item Sub One Sub Two Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/posts/markdown-syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":"Inline Code This is Inline Code\nOnly pre Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with backticks and language specified \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with backticks and language specified with line numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with line numbers and highlighted lines PaperMod supports linenos=true or linenos=table 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; With linenos=inline line might not get highlighted properly. This issue is fixed with 045c084 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 5 \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; 6 \u0026lt;meta 7 name=\u0026#34;description\u0026#34; 8 content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; 9 /\u0026gt; 10 \u0026lt;/head\u0026gt; 11 \u0026lt;body\u0026gt; 12 \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; 13 \u0026lt;/body\u0026gt; 14\u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Github Gist ","permalink":"http://localhost:1313/posts/code_syntax/","summary":"Sample article showcasing basic code syntax and formatting for HTML elements.","title":"Code Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nFigure Shortcode (PaperMod enhanced) Photo by Aditya Telange on Unsplash\nYouTube Twitter Shortcode PaperMod is now the most starred @GoHugoIO theme on #GitHub ! ✨\nHere\u0026#39;s what it offers:\n- Simple, minimal \u0026amp; clean design\n- Light/Dark mode\n- Fuzzy search for content\n- Good page-speed insights\nand much more...\nHuge thanks to all supporters🙏https://t.co/YAEd2cfrrn\n\u0026mdash; Aditya Telange 🔭 (@adityatelange) November 14, 2023 Vimeo Shortcode ","permalink":"http://localhost:1313/posts/rich-content/","summary":"\u003cp\u003eHugo ships with several \u003ca href=\"https://gohugo.io/content-management/shortcodes/#use-hugos-built-in-shortcodes\"\u003eBuilt-in Shortcodes\u003c/a\u003e for rich content, along with a \u003ca href=\"https://gohugo.io/about/hugo-and-gdpr/\"\u003ePrivacy Config\u003c/a\u003e and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\u003c/p\u003e","title":"Rich Content and Shortcodes"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates (extend_head.html) like so: refer ISSUE #236 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","permalink":"http://localhost:1313/posts/math-typesetting/","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\u003c/p\u003e","title":"Math Typesetting"}]